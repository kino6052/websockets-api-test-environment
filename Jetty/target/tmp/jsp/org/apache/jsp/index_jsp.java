/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.3.0.M2
 * Generated at: 2017-05-15 16:52:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("/WEB-INF/jsp/base.jspf", Long.valueOf(1494602732594L));
    _jspx_dependants.put("file:/C:/Users/kiril/.m2/repository/org/apache/taglibs/taglibs-standard-impl/1.2.1/taglibs-standard-impl-1.2.1.jar", Long.valueOf(1475266369771L));
    _jspx_dependants.put("jar:file:/C:/Users/kiril/.m2/repository/org/glassfish/web/javax.servlet.jsp.jstl/1.2.2/javax.servlet.jsp.jstl-1.2.2.jar!/META-INF/fn.tld", Long.valueOf(1343841418000L));
    _jspx_dependants.put("jar:file:/C:/Users/kiril/ISONAS/websockets-api-test-environment/Jetty/target/game-site-001/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar!/META-INF/c.tld", Long.valueOf(1343841418000L));
    _jspx_dependants.put("file:/C:/Users/kiril/ISONAS/websockets-api-test-environment/Jetty/target/game-site-001/WEB-INF/lib/javax.servlet.jsp.jstl-1.2.2.jar", Long.valueOf(1494603381939L));
    _jspx_dependants.put("jar:file:/C:/Users/kiril/.m2/repository/org/apache/taglibs/taglibs-standard-impl/1.2.1/taglibs-standard-impl-1.2.1.jar!/META-INF/fmt.tld", Long.valueOf(1384393662000L));
    _jspx_dependants.put("file:/C:/Users/kiril/.m2/repository/org/glassfish/web/javax.servlet.jsp.jstl/1.2.2/javax.servlet.jsp.jstl-1.2.2.jar", Long.valueOf(1494603381939L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>WEBSOCKETS TEST</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/css/bootstrap.min.css\" />\n");
      out.write("        <script src=\"http://code.jquery.com/jquery-1.9.1.js\"></script>\n");
      out.write("        <script src=\"http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.1/js/bootstrap.min.js\"></script>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("    <div id=\"container\">\n");
      out.write("        <h1>WEBSOCKETS TEST</h1>\n");
      out.write("        <ul id=\"ul\">\n");
      out.write("            <li id=\"li\"><span class=\"time\"></span> <span class=\"msg\"></span></li>\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("    <script type=\"text/javascript\" language=\"javascript\">\n");
      out.write("        var move;\n");
      out.write("        $(document).ready(function() {\n");
      out.write("            if(!(\"WebSocket\" in window))\n");
      out.write("            {\n");
      out.write("                console.log('WebSockets are not supported in this ' +\n");
      out.write("                        'browser. Try Internet Explorer 10 or the latest ' +\n");
      out.write("                        'versions of Mozilla Firefox or Google Chrome.');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            console.log('Connecting to the server.');\n");
      out.write("\n");
      out.write("            var server;\n");
      out.write("            try {\n");
      out.write("                server = new WebSocket('ws://' + window.location.host + '");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("');\n");
      out.write("            } catch(error) {\n");
      out.write("                console.warn(error);\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            server.onopen = function(event) {\n");
      out.write("    //                    modalWaitingBody\n");
      out.write("    //                            .text('Waiting on your opponent to join the game.');\n");
      out.write("    //                    modalWaiting.modal({ keyboard: false, show: true });\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            window.onbeforeunload = function() {\n");
      out.write("    //                    server.close();\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            server.onclose = function(event) {\n");
      out.write("    //                    if(!event.wasClean || event.code != 1000) {\n");
      out.write("    //                        toggleTurn(false, 'Game over due to error!');\n");
      out.write("    //                        modalWaiting.modal('hide');\n");
      out.write("    //                        modalErrorBody.text('Code ' + event.code + ': ' +\n");
      out.write("    //                                event.reason);\n");
      out.write("    //                        modalError.modal('show');\n");
      out.write("    //                    }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            server.onerror = function(event) {\n");
      out.write("    //                    modalWaiting.modal('hide');\n");
      out.write("    //                    modalErrorBody.text(event.data);\n");
      out.write("    //                    modalError.modal('show');\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            server.onmessage = function(event) {\n");
      out.write("                var message = event.data;\n");
      out.write("                var time = new Date;\n");
      out.write("                var clientTime = time.getHours() + \":\" + time.getMinutes() + \":\" + time.getSeconds();\n");
      out.write("                console.log(message, clientTime);\n");
      out.write("                var $ul = $(\"#ul\");\n");
      out.write("                var $li = $(\"#li\").clone();\n");
      out.write("                $li.find(\".time\").html(message);\n");
      out.write("                $li.find(\".msg\").html(clientTime);\n");
      out.write("                $ul.append($li);\n");
      out.write("\n");
      out.write("    //                    if(message.action == 'gameStarted') {\n");
      out.write("    //                        if(message.game.player1 == username)\n");
      out.write("    //                            opponentUsername = message.game.player2;\n");
      out.write("    //                        else\n");
      out.write("    //                            opponentUsername = message.game.player1;\n");
      out.write("    //                        opponent.text(opponentUsername);\n");
      out.write("    //                        toggleTurn(message.game.nextMoveBy == username);\n");
      out.write("    //                        modalWaiting.modal('hide');\n");
      out.write("    //                    } else if(message.action == 'opponentMadeMove') {\n");
      out.write("    //                        $('#r' + message.move.row + 'c' + message.move.column)\n");
      out.write("    //                                .unbind('click')\n");
      out.write("    //                                .removeClass('game-cell-selectable')\n");
      out.write("    //                                .addClass('game-cell-opponent game-cell-taken');\n");
      out.write("    //                        toggleTurn(true);\n");
      out.write("    //                    } else if(message.action == 'gameOver') {\n");
      out.write("    //                        toggleTurn(false, 'Game Over!');\n");
      out.write("    //                        if(message.winner) {\n");
      out.write("    //                            modalGameOverBody.text('Congratulations, you won!');\n");
      out.write("    //                        } else {\n");
      out.write("    //                            modalGameOverBody.text('User \"' + opponentUsername +\n");
      out.write("    //                                    '\" won the game.');\n");
      out.write("    //                        }\n");
      out.write("    //                        modalGameOver.modal('show');\n");
      out.write("    //                    } else if(message.action == 'gameIsDraw') {\n");
      out.write("    //                        toggleTurn(false, 'The game is a draw. ' +\n");
      out.write("    //                                'There is no winner.');\n");
      out.write("    //                        modalGameOverBody.text('The game ended in a draw. ' +\n");
      out.write("    //                                'Nobody wins!');\n");
      out.write("    //                        modalGameOver.modal('show');\n");
      out.write("    //                    } else if(message.action == 'gameForfeited') {\n");
      out.write("    //                        toggleTurn(false, 'Your opponent forfeited!');\n");
      out.write("    //                        modalGameOverBody.text('User \"' + opponentUsername +\n");
      out.write("    //                                '\" forfeited the game. You win!');\n");
      out.write("    //                        modalGameOver.modal('show');\n");
      out.write("    //                    }\n");
      out.write("            };\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(null);
    // /index.jsp(31,73) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue("/ticTacToe");
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }
}
